{"abi":[],"bytecode":{"object":"0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122011dd88ab82896384978e05920e1267163a6ec68540482137b6e89d6b0b8984e464736f6c63430008140033","sourceMap":"666:24871:63:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x600080fdfea264697066735822122011dd88ab82896384978e05920e1267163a6ec68540482137b6e89d6b0b8984e464736f6c63430008140033","sourceMap":"666:24871:63:-:0;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Smart contract library of mathematical functions operating with signed 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is basically a simple fraction whose numerator is signed 128-bit integer and denominator is 2^64.  As long as denominator is always the same, there is no need to store it, thus in Solidity signed 64.64-bit fixed point numbers are represented by int128 type holding only the numerator.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Utils/ABDKMath64x64.sol\":\"ABDKMath64x64\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@uniswap/=lib/v2-core/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":v2-core/=lib/v2-core/contracts/\"],\"viaIR\":true},\"sources\":{\"src/Utils/ABDKMath64x64.sol\":{\"keccak256\":\"0xb3ef9672e23ff416fe2f21c330c38461379fb9342d2c7ed7e42c70c3291cecb1\",\"license\":\"BSD-4-Clause\",\"urls\":[\"bzz-raw://c7fed3dfd80190b8953ceb533fb669e3c5606d085c7605d7997db7dba55e12ed\",\"dweb:/ipfs/QmUNejzdDT7CXofiY4aQuD79nx4c8wTr1YBiXrFjhrtZx3\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@uniswap/=lib/v2-core/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","v2-core/=lib/v2-core/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/Utils/ABDKMath64x64.sol":"ABDKMath64x64"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"src/Utils/ABDKMath64x64.sol":{"keccak256":"0xb3ef9672e23ff416fe2f21c330c38461379fb9342d2c7ed7e42c70c3291cecb1","urls":["bzz-raw://c7fed3dfd80190b8953ceb533fb669e3c5606d085c7605d7997db7dba55e12ed","dweb:/ipfs/QmUNejzdDT7CXofiY4aQuD79nx4c8wTr1YBiXrFjhrtZx3"],"license":"BSD-4-Clause"}},"version":1},"id":63}